; ModuleID = './doc-proof.ll'
source_filename = "/project/test/llvm-test-suite/MultiSource/Applications/SPASS/doc-proof.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.MEMORY_BIGBLOCKHEADERHELP = type { %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP* }
%struct.MEMORY_RESOURCEHELP = type { i8*, i8*, i8*, i8*, i32, i32, i32 }
%struct.PROOFSEARCH_HELP = type { %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, %struct.SORTTHEORY_HELP*, %struct.SORTTHEORY_HELP*, %struct.SORTTHEORY_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, i32*, i32*, %struct.LIST_HELP*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SORTTHEORY_HELP = type { %struct.st*, [4000 x %struct.NODE_HELP*], %struct.LIST_HELP*, %struct.LIST_HELP*, i32 }
%struct.st = type { %struct.subst*, %struct.LIST_HELP*, %struct.LIST_HELP*, i16, i16 }
%struct.subst = type { %struct.subst*, i32, %struct.term* }
%struct.term = type { i32, %union.anon, %struct.LIST_HELP*, i32, i32 }
%union.anon = type { %struct.LIST_HELP* }
%struct.NODE_HELP = type { %struct.LIST_HELP*, i32, i32, i32, %struct.LIST_HELP*, i32 }
%struct.SHARED_INDEX_NODE = type { %struct.st*, [3001 x %struct.term*], [4000 x %struct.term*], i32 }
%struct.LIST_HELP = type { %struct.LIST_HELP*, i8* }
%struct.CLAUSE_HELP = type { i32, i32, i32, i32, i64*, i32, %struct.LIST_HELP*, %struct.LIST_HELP*, i32, i32, %struct.LITERAL_HELP**, i32, i32, i32, i32 }
%struct.LITERAL_HELP = type { i32, i32, i32, %struct.CLAUSE_HELP*, %struct.term* }

@dp_DEPTH = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [59 x i8] c"\0ANOTE: clauses with following numbers have not been found:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"NOTE: Following clauses in reduced proof have incomplete parent sets:\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"\0A\0AHere is a proof with depth %d, length %d :\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@memory_OFFSET = external dso_local global i32, align 4
@memory_BIGBLOCKS = external dso_local global %struct.MEMORY_BIGBLOCKHEADERHELP*, align 8
@memory_MARKSIZE = external dso_local global i32, align 4
@memory_FREEDBYTES = external dso_local global i64, align 8
@memory_MAXMEM = external dso_local global i64, align 8
@memory_ARRAY = external dso_local global [0 x %struct.MEMORY_RESOURCEHELP*], align 8
@memory_ALIGN = external dso_local constant i32, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"%s.prf\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"begin_problem(Unknown).\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"list_of_descriptions.\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"name({*\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"*}).\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"author({*SPASS \00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"V 2.1\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"status(unsatisfiable).\0A\00", align 1
@.str.13 = private unnamed_addr constant [63 x i8] c"description({*File generated by SPASS containing a proof.*}).\0A\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"end_of_list.\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"list_of_symbols.\0A\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"\0Alist_of_proof(SPASS).\0A\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"end_problem.\0A\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"\0ADFG Proof printed to: \00", align 1

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @dp_Init() #0 {
  store i32 0, i32* @dp_DEPTH, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.LIST_HELP* @dp_PrintProof(%struct.PROOFSEARCH_HELP* noundef %0, %struct.LIST_HELP* noundef %1, i8* noundef %2) #1 {
  %4 = call i32* @prfs_Store(%struct.PROOFSEARCH_HELP* noundef %0)
  %5 = call %struct.LIST_HELP* @pcheck_ConvertParentsInSPASSProof(%struct.PROOFSEARCH_HELP* noundef %0, %struct.LIST_HELP* noundef %1) #9
  %6 = call i32 @list_Empty(%struct.LIST_HELP* noundef %5)
  %.not = icmp eq i32 %6, 0
  br i1 %.not, label %7, label %20

7:                                                ; preds = %3
  %8 = call i32 @puts(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0)) #9
  br label %9

9:                                                ; preds = %16, %7
  %.03 = phi %struct.LIST_HELP* [ %5, %7 ], [ %17, %16 ]
  %10 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.03)
  %.not8 = icmp eq i32 %10, 0
  br i1 %.not8, label %11, label %18

11:                                               ; preds = %9
  %12 = call i8* @list_Car(%struct.LIST_HELP* noundef %.03)
  %13 = ptrtoint i8* %12 to i64
  %14 = trunc i64 %13 to i32
  %15 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %14) #9
  br label %16

16:                                               ; preds = %11
  %17 = call %struct.LIST_HELP* @list_Pop(%struct.LIST_HELP* noundef %.03)
  br label %9, !llvm.loop !4

18:                                               ; preds = %9
  %19 = call i32 @putchar(i32 noundef 10) #9
  br label %20

20:                                               ; preds = %18, %3
  %21 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef %1) #9
  %22 = call %struct.LIST_HELP* @prfs_DocProofClauses(%struct.PROOFSEARCH_HELP* noundef %0)
  %23 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef %22) #9
  %24 = call %struct.LIST_HELP* @prfs_UsableClauses(%struct.PROOFSEARCH_HELP* noundef %0)
  %25 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef %24) #9
  %26 = call %struct.LIST_HELP* @prfs_WorkedOffClauses(%struct.PROOFSEARCH_HELP* noundef %0)
  %27 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef %26) #9
  %28 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* noundef %25, %struct.LIST_HELP* noundef %27)
  %29 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* noundef %23, %struct.LIST_HELP* noundef %28)
  %30 = call %struct.LIST_HELP* @list_Nil()
  br label %31

31:                                               ; preds = %41, %20
  %.06 = phi %struct.LIST_HELP* [ %29, %20 ], [ %42, %41 ]
  %.0 = phi %struct.LIST_HELP* [ %30, %20 ], [ %.1, %41 ]
  %32 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.06)
  %.not9 = icmp eq i32 %32, 0
  br i1 %.not9, label %33, label %43

33:                                               ; preds = %31
  %34 = call i8* @list_Car(%struct.LIST_HELP* noundef %.06)
  %35 = bitcast i8* %34 to %struct.CLAUSE_HELP*
  %36 = call i32 @clause_IsFromSplitting(%struct.CLAUSE_HELP* noundef %35)
  %.not17 = icmp eq i32 %36, 0
  br i1 %.not17, label %40, label %37

37:                                               ; preds = %33
  %38 = call i8* @list_Car(%struct.LIST_HELP* noundef %.06)
  %39 = call %struct.LIST_HELP* @list_Cons(i8* noundef %38, %struct.LIST_HELP* noundef %.0)
  br label %40

40:                                               ; preds = %37, %33
  %.1 = phi %struct.LIST_HELP* [ %39, %37 ], [ %.0, %33 ]
  br label %41

41:                                               ; preds = %40
  %42 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.06)
  br label %31, !llvm.loop !6

43:                                               ; preds = %31
  call void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP* noundef %21, i32 noundef 64) #9
  call void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP* noundef %29, i32 noundef 64) #9
  call void @pcheck_MarkRecursive(%struct.LIST_HELP* noundef %21) #9
  call void @pcheck_MarkRecursive(%struct.LIST_HELP* noundef %.0) #9
  %44 = call %struct.LIST_HELP* @list_Nil()
  br label %45

45:                                               ; preds = %55, %43
  %.17 = phi %struct.LIST_HELP* [ %29, %43 ], [ %56, %55 ]
  %.04 = phi %struct.LIST_HELP* [ %44, %43 ], [ %.15, %55 ]
  %46 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.17)
  %.not10 = icmp eq i32 %46, 0
  br i1 %.not10, label %47, label %57

47:                                               ; preds = %45
  %48 = call i8* @list_Car(%struct.LIST_HELP* noundef %.17)
  %49 = bitcast i8* %48 to %struct.CLAUSE_HELP*
  %50 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* noundef %49, i32 noundef 64)
  %.not16 = icmp eq i32 %50, 0
  br i1 %.not16, label %54, label %51

51:                                               ; preds = %47
  %52 = call i8* @list_Car(%struct.LIST_HELP* noundef %.17)
  %53 = call %struct.LIST_HELP* @list_Cons(i8* noundef %52, %struct.LIST_HELP* noundef %.04)
  br label %54

54:                                               ; preds = %51, %47
  %.15 = phi %struct.LIST_HELP* [ %53, %51 ], [ %.04, %47 ]
  br label %55

55:                                               ; preds = %54
  %56 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.17)
  br label %45, !llvm.loop !7

57:                                               ; preds = %45
  %58 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef %21) #9
  %59 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* noundef %.04, %struct.LIST_HELP* noundef %58)
  %60 = call %struct.LIST_HELP* @pcheck_ClauseNumberMergeSort(%struct.LIST_HELP* noundef %59) #9
  %61 = call %struct.LIST_HELP* @pcheck_ReduceSPASSProof(%struct.LIST_HELP* noundef %60) #9
  %62 = call i32 @pcheck_SeqProofDepth(%struct.LIST_HELP* noundef %61) #9
  call void @dp_SetProofDepth(i32 noundef %62)
  %63 = call %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP* noundef %29) #9
  %64 = call %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP* noundef %1) #9
  %65 = call %struct.LIST_HELP* @list_Nil()
  br label %66

66:                                               ; preds = %76, %57
  %.2 = phi %struct.LIST_HELP* [ %61, %57 ], [ %77, %76 ]
  %.01 = phi %struct.LIST_HELP* [ %65, %57 ], [ %.12, %76 ]
  %67 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.2)
  %.not11 = icmp eq i32 %67, 0
  br i1 %.not11, label %68, label %78

68:                                               ; preds = %66
  %69 = call i8* @list_Car(%struct.LIST_HELP* noundef %.2)
  %70 = bitcast i8* %69 to %struct.CLAUSE_HELP*
  %71 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* noundef %70, i32 noundef 128)
  %.not15 = icmp eq i32 %71, 0
  br i1 %.not15, label %75, label %72

72:                                               ; preds = %68
  %73 = call i8* @list_Car(%struct.LIST_HELP* noundef %.2)
  %74 = call %struct.LIST_HELP* @list_Cons(i8* noundef %73, %struct.LIST_HELP* noundef %.01)
  br label %75

75:                                               ; preds = %72, %68
  %.12 = phi %struct.LIST_HELP* [ %74, %72 ], [ %.01, %68 ]
  br label %76

76:                                               ; preds = %75
  %77 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.2)
  br label %66, !llvm.loop !8

78:                                               ; preds = %66
  %79 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.01)
  %.not12 = icmp eq i32 %79, 0
  br i1 %.not12, label %80, label %93

80:                                               ; preds = %78
  %81 = call i32 @puts(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([70 x i8], [70 x i8]* @.str.2, i64 0, i64 0)) #9
  br label %82

82:                                               ; preds = %89, %80
  %.3 = phi %struct.LIST_HELP* [ %.01, %80 ], [ %90, %89 ]
  %83 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.3)
  %.not13 = icmp eq i32 %83, 0
  br i1 %.not13, label %84, label %91

84:                                               ; preds = %82
  %85 = call i8* @list_Car(%struct.LIST_HELP* noundef %.3)
  %86 = bitcast i8* %85 to %struct.CLAUSE_HELP*
  %87 = call i32 @clause_Number(%struct.CLAUSE_HELP* noundef %86)
  %88 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %87) #9
  br label %89

89:                                               ; preds = %84
  %90 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.3)
  br label %82, !llvm.loop !9

91:                                               ; preds = %82
  %92 = call i32 @putchar(i32 noundef 10) #9
  br label %93

93:                                               ; preds = %91, %78
  %94 = call i32 @dp_ProofDepth()
  %95 = call i32 @list_Length(%struct.LIST_HELP* noundef %61) #9
  %96 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i32 noundef %94, i32 noundef %95) #9
  call void @clause_ListPrint(%struct.LIST_HELP* noundef %61) #9
  %97 = call i32 @flag_GetFlagValue(i32* noundef %4, i32 noundef 31)
  %.not14 = icmp eq i32 %97, 0
  br i1 %.not14, label %100, label %98

98:                                               ; preds = %93
  %99 = call i32* @prfs_Precedence(%struct.PROOFSEARCH_HELP* noundef %0)
  call void @dp_FPrintDFGProof(%struct.LIST_HELP* noundef %61, i8* noundef %2, i32* noundef %4, i32* noundef %99)
  br label %100

100:                                              ; preds = %98, %93
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %102 = call i32 @fflush(%struct._IO_FILE* noundef %101) #9
  call void @list_Delete(%struct.LIST_HELP* noundef %21)
  call void @list_Delete(%struct.LIST_HELP* noundef %29)
  call void @list_Delete(%struct.LIST_HELP* noundef %60)
  call void @list_Delete(%struct.LIST_HELP* noundef %.0)
  call void @list_Delete(%struct.LIST_HELP* noundef %.01)
  ret %struct.LIST_HELP* %61
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32* @prfs_Store(%struct.PROOFSEARCH_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i64 0, i32 14
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

declare dso_local %struct.LIST_HELP* @pcheck_ConvertParentsInSPASSProof(%struct.PROOFSEARCH_HELP* noundef, %struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define internal i32 @list_Empty(%struct.LIST_HELP* noundef readnone %0) #4 {
  %2 = icmp eq %struct.LIST_HELP* %0, null
  %3 = zext i1 %2 to i32
  ret i32 %3
}

declare dso_local i32 @puts(i8* noundef) #3

declare dso_local i32 @printf(i8* noundef, ...) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i8* @list_Car(%struct.LIST_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.LIST_HELP* @list_Pop(%struct.LIST_HELP* noundef %0) #1 {
  %2 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %0)
  call void @list_Free(%struct.LIST_HELP* noundef %0)
  ret %struct.LIST_HELP* %2
}

declare dso_local i32 @putchar(i32 noundef) #3

declare dso_local %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define internal noalias %struct.LIST_HELP* @list_Nil() #4 {
  ret %struct.LIST_HELP* null
}

; Function Attrs: nofree noinline norecurse nosync nounwind uwtable
define internal %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* noundef %0, %struct.LIST_HELP* noundef %1) #5 {
  %3 = call i32 @list_Empty(%struct.LIST_HELP* noundef %0)
  %.not = icmp eq i32 %3, 0
  br i1 %.not, label %5, label %4

4:                                                ; preds = %2
  br label %17

5:                                                ; preds = %2
  %6 = call i32 @list_Empty(%struct.LIST_HELP* noundef %1)
  %.not2 = icmp eq i32 %6, 0
  br i1 %.not2, label %8, label %7

7:                                                ; preds = %5
  br label %17

8:                                                ; preds = %5
  br label %9

9:                                                ; preds = %13, %8
  %.01 = phi %struct.LIST_HELP* [ %0, %8 ], [ %14, %13 ]
  %10 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.01)
  %11 = call i32 @list_Empty(%struct.LIST_HELP* noundef %10)
  %.not3 = icmp eq i32 %11, 0
  br i1 %.not3, label %12, label %15

12:                                               ; preds = %9
  br label %13

13:                                               ; preds = %12
  %14 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.01)
  br label %9, !llvm.loop !10

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %.01, i64 0, i32 0
  store %struct.LIST_HELP* %1, %struct.LIST_HELP** %16, align 8
  br label %17

17:                                               ; preds = %15, %7, %4
  %.0 = phi %struct.LIST_HELP* [ %1, %4 ], [ %0, %7 ], [ %0, %15 ]
  ret %struct.LIST_HELP* %.0
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal %struct.LIST_HELP* @prfs_DocProofClauses(%struct.PROOFSEARCH_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i64 0, i32 12
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %2, align 8
  ret %struct.LIST_HELP* %3
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal %struct.LIST_HELP* @prfs_UsableClauses(%struct.PROOFSEARCH_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i64 0, i32 7
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %2, align 8
  ret %struct.LIST_HELP* %3
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal %struct.LIST_HELP* @prfs_WorkedOffClauses(%struct.PROOFSEARCH_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i64 0, i32 5
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %2, align 8
  ret %struct.LIST_HELP* %3
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @clause_IsFromSplitting(%struct.CLAUSE_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i64 0, i32 14
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 15
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.LIST_HELP* @list_Cons(i8* noundef %0, %struct.LIST_HELP* noundef %1) #1 {
  %3 = call i8* @memory_Malloc(i32 noundef 16) #9
  %4 = bitcast i8* %3 to %struct.LIST_HELP*
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i8**
  store i8* %0, i8** %6, align 8
  %7 = bitcast i8* %3 to %struct.LIST_HELP**
  store %struct.LIST_HELP* %1, %struct.LIST_HELP** %7, align 8
  ret %struct.LIST_HELP* %4
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %0, i64 0, i32 0
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %2, align 8
  ret %struct.LIST_HELP* %3
}

declare dso_local void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP* noundef, i32 noundef) #3

declare dso_local void @pcheck_MarkRecursive(%struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @clause_GetFlag(%struct.CLAUSE_HELP* nocapture noundef readonly %0, i32 noundef %1) #2 {
  %3 = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, %1
  %6 = icmp ne i32 %5, 0
  %7 = zext i1 %6 to i32
  ret i32 %7
}

declare dso_local %struct.LIST_HELP* @pcheck_ClauseNumberMergeSort(%struct.LIST_HELP* noundef) #3

declare dso_local %struct.LIST_HELP* @pcheck_ReduceSPASSProof(%struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn writeonly
define internal void @dp_SetProofDepth(i32 noundef %0) #0 {
  store i32 %0, i32* @dp_DEPTH, align 4
  ret void
}

declare dso_local i32 @pcheck_SeqProofDepth(%struct.LIST_HELP* noundef) #3

declare dso_local %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @clause_Number(%struct.CLAUSE_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @dp_ProofDepth() #2 {
  %1 = load i32, i32* @dp_DEPTH, align 4
  ret i32 %1
}

declare dso_local i32 @list_Length(%struct.LIST_HELP* noundef) #3

declare dso_local void @clause_ListPrint(%struct.LIST_HELP* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @flag_GetFlagValue(i32* nocapture noundef readonly %0, i32 noundef %1) #2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds i32, i32* %0, i64 %3
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define internal void @dp_FPrintDFGProof(%struct.LIST_HELP* noundef readonly %0, i8* noundef %1, i32* noundef %2, i32* noundef %3) #1 {
  %5 = call %struct.LIST_HELP* @list_Nil()
  %6 = call i64 @strlen(i8* noundef nonnull dereferenceable(1) %1) #10
  %7 = trunc i64 %6 to i32
  %8 = add i32 %7, 5
  %9 = call i8* @memory_Malloc(i32 noundef %8) #9
  %10 = call i32 (i8*, i8*, ...) @sprintf(i8* noundef nonnull dereferenceable(1) %9, i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* noundef %1) #9
  %11 = call %struct._IO_FILE* @misc_OpenFile(i8* noundef %9, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #9
  %12 = call i64 @fwrite(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %11)
  %13 = call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %11)
  %14 = call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %11)
  %15 = call i32 @fputs(i8* noundef %1, %struct._IO_FILE* noundef %11) #9
  %16 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %11)
  %17 = call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %11)
  %18 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %11)
  %19 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %11)
  %20 = call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %11)
  %21 = call i64 @fwrite(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.13, i64 0, i64 0), i64 62, i64 1, %struct._IO_FILE* %11)
  %22 = call i64 @fwrite(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i64 14, i64 1, %struct._IO_FILE* %11)
  %23 = call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %11)
  call void @fol_FPrintDFGSignature(%struct._IO_FILE* noundef %11) #9
  %24 = call i64 @fwrite(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i64 14, i64 1, %struct._IO_FILE* %11)
  br label %25

25:                                               ; preds = %41, %4
  %.05 = phi %struct.LIST_HELP* [ %5, %4 ], [ %.27, %41 ]
  %.03 = phi %struct.LIST_HELP* [ %5, %4 ], [ %.2, %41 ]
  %.01 = phi %struct.LIST_HELP* [ %5, %4 ], [ %.12, %41 ]
  %.0 = phi %struct.LIST_HELP* [ %0, %4 ], [ %42, %41 ]
  %26 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.0)
  %.not = icmp eq i32 %26, 0
  br i1 %.not, label %27, label %43

27:                                               ; preds = %25
  %28 = call i8* @list_Car(%struct.LIST_HELP* noundef %.0)
  %29 = bitcast i8* %28 to %struct.CLAUSE_HELP*
  %30 = call i32 @clause_IsFromInput(%struct.CLAUSE_HELP* noundef %29)
  %.not9 = icmp eq i32 %30, 0
  br i1 %.not9, label %38, label %31

31:                                               ; preds = %27
  %32 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* noundef %29, i32 noundef 8)
  %.not10 = icmp eq i32 %32, 0
  br i1 %.not10, label %35, label %33

33:                                               ; preds = %31
  %34 = call %struct.LIST_HELP* @list_Cons(i8* noundef %28, %struct.LIST_HELP* noundef %.03)
  br label %37

35:                                               ; preds = %31
  %36 = call %struct.LIST_HELP* @list_Cons(i8* noundef %28, %struct.LIST_HELP* noundef %.05)
  br label %37

37:                                               ; preds = %35, %33
  %.16 = phi %struct.LIST_HELP* [ %.05, %33 ], [ %36, %35 ]
  %.14 = phi %struct.LIST_HELP* [ %34, %33 ], [ %.03, %35 ]
  br label %40

38:                                               ; preds = %27
  %39 = call %struct.LIST_HELP* @list_Cons(i8* noundef %28, %struct.LIST_HELP* noundef %.01)
  br label %40

40:                                               ; preds = %38, %37
  %.27 = phi %struct.LIST_HELP* [ %.16, %37 ], [ %.05, %38 ]
  %.2 = phi %struct.LIST_HELP* [ %.14, %37 ], [ %.03, %38 ]
  %.12 = phi %struct.LIST_HELP* [ %.01, %37 ], [ %39, %38 ]
  br label %41

41:                                               ; preds = %40
  %42 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.0)
  br label %25, !llvm.loop !11

43:                                               ; preds = %25
  %44 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* noundef %.03) #9
  %45 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* noundef %.05) #9
  %46 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* noundef %.01) #9
  call void @clause_FPrintCnfDFG(%struct._IO_FILE* noundef %11, i32 noundef 0, %struct.LIST_HELP* noundef %45, %struct.LIST_HELP* noundef %44, i32* noundef %2, i32* noundef %3) #9
  %47 = call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %11)
  br label %48

48:                                               ; preds = %53, %43
  %.1 = phi %struct.LIST_HELP* [ %46, %43 ], [ %54, %53 ]
  %49 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.1)
  %.not8 = icmp eq i32 %49, 0
  br i1 %.not8, label %50, label %55

50:                                               ; preds = %48
  %51 = call i8* @list_Car(%struct.LIST_HELP* noundef %.1)
  %52 = bitcast i8* %51 to %struct.CLAUSE_HELP*
  call void @clause_FPrintDFGStep(%struct._IO_FILE* noundef %11, %struct.CLAUSE_HELP* noundef %52, i32 noundef 1) #9
  br label %53

53:                                               ; preds = %50
  %54 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.1)
  br label %48, !llvm.loop !12

55:                                               ; preds = %48
  %56 = call i64 @fwrite(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i64 14, i64 1, %struct._IO_FILE* %11)
  %57 = call i64 @fwrite(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), i64 14, i64 1, %struct._IO_FILE* %11)
  call void @misc_CloseFile(%struct._IO_FILE* noundef %11, i8* noundef %9) #9
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %59 = call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %58)
  %60 = call i32 @puts(i8* noundef nonnull dereferenceable(1) %9) #9
  call void @list_Delete(%struct.LIST_HELP* noundef %44)
  call void @list_Delete(%struct.LIST_HELP* noundef %45)
  call void @list_Delete(%struct.LIST_HELP* noundef %46)
  %61 = call i64 @strlen(i8* noundef nonnull dereferenceable(1) %1) #10
  %62 = trunc i64 %61 to i32
  %63 = add i32 %62, 5
  call void @memory_Free(i8* noundef %9, i32 noundef %63)
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32* @prfs_Precedence(%struct.PROOFSEARCH_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i64 0, i32 13
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

declare dso_local i32 @fflush(%struct._IO_FILE* noundef) #3

; Function Attrs: noinline nounwind uwtable
define internal void @list_Delete(%struct.LIST_HELP* noundef %0) #1 {
  br label %2

2:                                                ; preds = %4, %1
  %.0 = phi %struct.LIST_HELP* [ %0, %1 ], [ %5, %4 ]
  %3 = call i32 @list_Empty(%struct.LIST_HELP* noundef %.0)
  %.not = icmp eq i32 %3, 0
  br i1 %.not, label %4, label %6

4:                                                ; preds = %2
  %5 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* noundef %.0)
  call void @list_Free(%struct.LIST_HELP* noundef %.0)
  br label %2, !llvm.loop !13

6:                                                ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @list_Free(%struct.LIST_HELP* noundef %0) #1 {
  %2 = bitcast %struct.LIST_HELP* %0 to i8*
  call void @memory_Free(i8* noundef %2, i32 noundef 16)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @memory_Free(i8* noundef %0, i32 noundef %1) #1 {
  %3 = call i32 @memory_LookupRealBlockSize(i32 noundef %1)
  %4 = icmp ugt i32 %1, 1023
  br i1 %4, label %5, label %53

5:                                                ; preds = %2
  %6 = load i32, i32* @memory_OFFSET, align 4
  %7 = zext i32 %6 to i64
  %8 = sub nsw i64 0, %7
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = getelementptr inbounds i8, i8* %9, i64 -16
  %11 = bitcast i8* %10 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %12 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %11, align 8
  %.not = icmp eq %struct.MEMORY_BIGBLOCKHEADERHELP* %12, null
  br i1 %.not, label %20, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds i8, i8* %10, i64 8
  %15 = bitcast i8* %14 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %16 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %15, align 8
  %17 = bitcast i8* %10 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %18 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %17, align 8
  %19 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %18, i64 0, i32 1
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %16, %struct.MEMORY_BIGBLOCKHEADERHELP** %19, align 8
  br label %24

20:                                               ; preds = %5
  %21 = getelementptr inbounds i8, i8* %10, i64 8
  %22 = bitcast i8* %21 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %23 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %22, align 8
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %23, %struct.MEMORY_BIGBLOCKHEADERHELP** @memory_BIGBLOCKS, align 8
  br label %24

24:                                               ; preds = %20, %13
  %25 = getelementptr inbounds i8, i8* %10, i64 8
  %26 = bitcast i8* %25 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %27 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %26, align 8
  %.not1 = icmp eq %struct.MEMORY_BIGBLOCKHEADERHELP* %27, null
  br i1 %.not1, label %35, label %28

28:                                               ; preds = %24
  %29 = bitcast i8* %10 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %30 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %29, align 8
  %31 = getelementptr inbounds i8, i8* %10, i64 8
  %32 = bitcast i8* %31 to %struct.MEMORY_BIGBLOCKHEADERHELP**
  %33 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %32, align 8
  %34 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %33, i64 0, i32 0
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %30, %struct.MEMORY_BIGBLOCKHEADERHELP** %34, align 8
  br label %35

35:                                               ; preds = %28, %24
  %36 = load i32, i32* @memory_MARKSIZE, align 4
  %37 = add i32 %3, %36
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 16
  %40 = load i64, i64* @memory_FREEDBYTES, align 8
  %41 = add i64 %40, %39
  store i64 %41, i64* @memory_FREEDBYTES, align 8
  %42 = load i64, i64* @memory_MAXMEM, align 8
  %43 = icmp sgt i64 %42, -1
  br i1 %43, label %44, label %51

44:                                               ; preds = %35
  %45 = load i32, i32* @memory_MARKSIZE, align 4
  %46 = add i32 %3, %45
  %47 = zext i32 %46 to i64
  %48 = add nuw nsw i64 %47, 16
  %49 = load i64, i64* @memory_MAXMEM, align 8
  %50 = add i64 %49, %48
  store i64 %50, i64* @memory_MAXMEM, align 8
  br label %51

51:                                               ; preds = %44, %35
  %52 = getelementptr inbounds i8, i8* %0, i64 -16
  call void @free(i8* noundef %52) #9
  br label %72

53:                                               ; preds = %2
  %54 = zext i32 %1 to i64
  %55 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i64 0, i64 %54
  %56 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %55, align 8
  %57 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %56, i64 0, i32 4
  %58 = load i32, i32* %57, align 8
  %59 = sext i32 %58 to i64
  %60 = load i64, i64* @memory_FREEDBYTES, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* @memory_FREEDBYTES, align 8
  %62 = zext i32 %1 to i64
  %63 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i64 0, i64 %62
  %64 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %63, align 8
  %65 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %64, i64 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %0 to i8**
  store i8* %66, i8** %67, align 8
  %68 = zext i32 %1 to i64
  %69 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i64 0, i64 %68
  %70 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %69, align 8
  %71 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %70, i64 0, i32 0
  store i8* %0, i8** %71, align 8
  br label %72

72:                                               ; preds = %53, %51
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @memory_LookupRealBlockSize(i32 noundef %0) #2 {
  %2 = icmp ult i32 %0, 1024
  br i1 %2, label %3, label %9

3:                                                ; preds = %1
  %4 = zext i32 %0 to i64
  %5 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i64 0, i64 %4
  %6 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %5, align 8
  %7 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %6, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  br label %11

9:                                                ; preds = %1
  %10 = call i32 @memory_CalculateRealBlockSize(i32 noundef %0)
  br label %11

11:                                               ; preds = %9, %3
  %.0 = phi i32 [ %8, %3 ], [ %10, %9 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local void @free(i8* noundef) #6

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define internal i32 @memory_CalculateRealBlockSize(i32 noundef %0) #4 {
  br i1 false, label %2, label %3

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %2, %1
  %4 = load i32, i32* @memory_ALIGN, align 4
  %5 = urem i32 %0, %4
  %.not = icmp eq i32 %5, 0
  br i1 %.not, label %11, label %6

6:                                                ; preds = %3
  %7 = load i32, i32* @memory_ALIGN, align 4
  %8 = urem i32 %0, %7
  %9 = sub i32 %7, %8
  %10 = add i32 %9, %0
  br label %11

11:                                               ; preds = %6, %3
  %.1 = phi i32 [ %10, %6 ], [ %0, %3 ]
  ret i32 %.1
}

declare dso_local i8* @memory_Malloc(i32 noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define internal void @flag_CheckFlagIdInRange(i32 noundef %0) #4 {
  ret void
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local i64 @strlen(i8* noundef) #7

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8* noundef, i8* noundef, ...) #6

declare dso_local %struct._IO_FILE* @misc_OpenFile(i8* noundef, i8* noundef) #3

declare dso_local i32 @fputs(i8* noundef, %struct._IO_FILE* noundef) #3

declare dso_local void @fol_FPrintDFGSignature(%struct._IO_FILE* noundef) #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define internal i32 @clause_IsFromInput(%struct.CLAUSE_HELP* nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i64 0, i32 14
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 16
  %5 = zext i1 %4 to i32
  ret i32 %5
}

declare dso_local %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* noundef) #3

declare dso_local void @clause_FPrintCnfDFG(%struct._IO_FILE* noundef, i32 noundef, %struct.LIST_HELP* noundef, %struct.LIST_HELP* noundef, i32* noundef, i32* noundef) #3

declare dso_local void @clause_FPrintDFGStep(%struct._IO_FILE* noundef, %struct.CLAUSE_HELP* noundef, i32 noundef) #3

declare dso_local void @misc_CloseFile(%struct._IO_FILE* noundef, i8* noundef) #3

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) #8

attributes #0 = { mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree noinline norecurse nosync nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
